# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${USER}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${USER}.zsh"
fi

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

export HISTSIZE=100000
export SAVEHIST=$HISTSIZE
setopt EXTENDED_HISTORY
unsetopt BEEP

export PATH=./:~/bin:~/bin/mongodb/bin:/opt/local/bin:/opt/local/sbin:~/.rvm/bin:$PATH
export PATH=/opt/homebrew/bin:/usr/local/homebrew/bin:$PATH
export PATH=~/.jenv/bin:$PATH
export PATH=~/bin/scmpuff:$PATH
export PATH=~/.local/bin:$PATH

export XDG_CONFIG_HOME="$HOME/.config"

autoload edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line

eval "$(jenv init -)"
eval "$(scmpuff init -s)"
eval "$(zoxide init zsh)"

if [[ "$(uname)" == "Linux" ]]; then
  export JAVA7_HOME=/usr/lib/jvm/java-7-openjdk
  export JAVA8_HOME=/usr/lib/jvm/java-8-openjdk
elif [[ "$(uname)" == "Darwin" ]]; then
  export JAVA7_HOME=$(/usr/libexec/java_home -v 1.7)
  export JAVA8_HOME=$(/usr/libexec/java_home -v 1.8)
fi

# wezterm
# This function emits an OSC 1337 sequence to set a user var
# associated with the current terminal pane.
# It requires the `base64` utility to be available in the path.
# This function is included in the wezterm shell integration script, but
# is reproduced here for clarity
__wezterm_set_user_var() {
  if hash base64 2>/dev/null; then
    if [[ -z "${TMUX}" ]]; then
      printf "\033]1337;SetUserVar=%s=%s\007" "$1" $(echo -n "$2" | base64)
    else
      # <https://github.com/tmux/tmux/wiki/FAQ#what-is-the-passthrough-escape-sequence-and-how-do-i-use-it>
      # Note that you ALSO need to add "set -g allow-passthrough on" to your tmux.conf
      printf "\033Ptmux;\033\033]1337;SetUserVar=%s=%s\007\033\\" "$1" $(echo -n "$2" | base64)
    fi
  fi
}

function _run_prog() {
  # set PROG to the program being run
  __wezterm_set_user_var "PROG" "$1"

  # arrange to clear it when it is done
  trap '__wezterm_set_user_var PROG ""' EXIT

  # and now run the corresponding command, taking care to avoid looping
  # with the alias definition
  command "$@"
}

# Tmux
alias tmux="tmux -2"
function tmx {
  tmux new-session -A -s main
}
# Allow ctrl-a for tmux prefix
bindkey -r '^A'

##################
##     ALIAS    ##
##################

alias sbt-debug="sbt -jvm-debug 5005"

# aliasing platform specific binaries
if [[ "$(uname)" == "Linux" ]]; then
  alias ls='ls --color=auto'
  alias g="nvim-gtk"
  alias open="xdg-open"
  alias xclip="/usr/bin/xclip -selection clipboard"
elif [[ "$(uname)" == "Darwin" ]]; then
  alias ls='/opt/homebrew/bin/gls --color=auto'
  alias find='gfind'
  alias g="vimr"
fi

## Standard aliases - security
# "-i" asks for confirmation when deleting. This is good.
# In the "dangerous" section there are aliases for non-confirmation.
alias rm='rm -v -i'
alias cp='cp -v -i'
alias mv='mv -v -i'

## Standard aliases - CPM/MSDOS heritage
alias del='rm -v -i'
alias cls='clear'
# "-p" lets you create a path structure with one command, ex. mkdir -p /a/b/c
alias md='mkdir -v -p'
alias rd='rmdir -v'

## Standard aliases - convenience
# To be used as in "cp /etc/inetd.conf /etc/inetd.conf.`today`"
alias today="date '+%d%h%y'"
# Pressing "x" and enter exits.
alias x='exit'
# Quite handy, type "ff test.c" to find "test.c".
# Keep in mind that there is also "locate test.c" which is faster.
alias ff='find . -name $*'
# Alias for "." and ".."
# Goes back one directory
alias ..='cd ..'
alias ../='cd ../'
# Goes back two directories
alias ...='cd ../..'
alias .../='cd ../../'
# Goes to the root directory
alias /='cd /'

alias up='cd ..'
alias up2='cd ../..'
alias up3='cd ../../..'
alias up4='cd ../../../..'
alias up5='cd ../../../../..'
alias up6='cd ../../../../../..'
alias up7='cd ../../../../../../..'

## Standard aliases - for typos
# These are the most common typos made by users, even experienced ones.
# Send me yours.
alias maek='make'
alias alais='alias'
alias csl='clear'
alias sl='ls'

#allow grep and less to have color
alias grep='grep --color'
alias less='less -R'

#use less
alias more='less -R'

#use nvim
alias nvim="_run_prog nvim"
alias vi="_run_prog nvim"
alias vim="_run_prog nvim"
compdef _run_prog=vi
compdef _run_prog=vim
compdef _run_prog=nvim

#Standard ls commands
#list all .* files
alias l.='ls -d .*'
alias la='ls -a'
alias ll='ls -l'
alias lal='ls -al'

#aptget
alias ai='yay -S'

# git
alias gru='git remote update'
alias grm='git rebase origin/$(main-branch)'
alias gittouch='git commit --amend --date="$(date)"'
alias gm='git checkout $(main-branch)'
alias lg='lazygit'

alias pn='pnpm'

alias j='z'
alias ji='zi'

if [[ "$(uname)" == "Linux" ]]; then
  alias h='history'
else
  alias h='history 0'
fi

# Utilities
function findconfig {
  if [ -f "$1" ]; then
    printf '%s\n' "${PWD%/}/$1"
  elif [ "$PWD" = / ]; then
    false
  else
    (cd .. && findconfig "$1")
  fi
}

function fgrep {
  find . -name "$1" -type f -exec grep --color=auto -i -n "$2" /dev/null {} \; 2>/dev/null
}

# Docker
function ddown {
  compose_file=$(findconfig docker-compose.yml)
  set -x
  docker compose --file ${compose_file} down $@
}

function dup {
  compose_file=$(findconfig docker-compose.yml)
  set -x
  docker compose --file ${compose_file} up --wait
}

# Zsh
function zreload {
  source ~/.zshrc
}

function zrc {
  vim ~/.zshrc
}

# Git
function git-rebase-backup {
  current_branch=$(git branch --show-current)
  set -x
  git branch "${current_branch}-backup"

  main_branch=$(main-branch)
  git checkout ${main_branch}
  git rebase origin/${main_branch}
  git reset --hard origin/${main_branch}

  git branch -D "${current_branch}"
  git checkout -b "${current_branch}"
}

function main-branch {
  master_exist=$(git branch --list master)

  if [[ -z ${master_exist} ]]; then
    echo main
  else
    echo master
  fi
}

#####
bindkey "jj" vi-cmd-mode # map jj to go back to command mode
bindkey "^r" history-incremental-search-backward
bindkey "^f" history-incremental-search-forward

export PROJECT_HOME=~/git

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

eval "$($(brew --prefix)/bin/mise activate zsh)"
